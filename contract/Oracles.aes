contract Oracles =

  record state = {  // Valores claves a guardar
    greeter_oracle : oracle(string, string),
    id_query : map(address, oracle_query(string, string)),
    question_answer : map(string, string)}

  stateful entrypoint init() : state =  //Función de Inicio
    let greeter_oracle : oracle(string, string) = registerOracle(10,200)
    { greeter_oracle = greeter_oracle, id_query = {}, question_answer  = {} }

  stateful entrypoint registerOracle(      // Función para Registrar el Oraculo del Contracto
                           qfee : int,     //Fee de pago mínimo
                           rttl : int) : oracle(string, string) =   //bloques para el tiempo de vencimiento del oráculo
    Oracle.register(Contract.address, qfee, RelativeTTL(rttl))

  entrypoint get_oracle(): oracle(string, string) =  //Consulta dirección del oráculo
    state.greeter_oracle

  entrypoint get_query(): oracle_query(string, string) =  //Consulta id del query
    switch(Map.lookup(Call.caller, state.id_query))
      None    => abort("No query")
      Some(x) => x

  entrypoint get_answer(stranswer : string) =  //Consulta si hay respuesta
    switch(Map.lookup(stranswer, state.question_answer))
      None    => abort("No Resitrado")
      Some(x) => x

  payable stateful entrypoint quest_answer(quest : string, answ : string) : bool =  //Función registrar respuesta
    let val = Call.value
    if(val > 0)
      false
    else
      put(state{question_answer[quest] = answ })
      true

  entrypoint queryFee(o : oracle(string, string)) : int =  //Consulta pago mínimo para una consulta del oráculo
    Oracle.query_fee(o)

  payable stateful entrypoint createQuery(      //Hacer la consulta al oráculo, pagar
                                          o    : oracle(string, string),    //dirección del oráculo
                                          q    : string,      //pregunta
                                          qfee : int,         //pago
                                          qttl : int,         //controles de la última altura a la que el oráculo puede enviar una respuesta
                                          rttl : int) : oracle_query(string, string) =    //controla el tiempo que una respuesta se mantiene en la cadena
    require(qfee =< Call.value, "insufficient value for qfee")    //verifica el pago
    let query : oracle_query(string, string) = Oracle.query(o, q, qfee, RelativeTTL(qttl), RelativeTTL(rttl))    //registra la consulta al oráculo, muestra el id
    let query_answer = get_answer(q)
    Oracle.respond(o, query, query_answer)
    put(state{id_query[Call.caller] = query })
    query

  stateful entrypoint extendOracle(  //Extender el tiempo del oráculo
                                    o   : oracle(string, string),
                                    ttl : int) : unit =
    Oracle.extend(o, RelativeTTL(ttl))

  stateful entrypoint respond(  // Agrega la respuesta a la pregunta que realizan al oráculo
                              o    : oracle(string, string),  //dirección del oráculo
                              q    : oracle_query(string, string),  //id de la consulta en el oráculo
                              r    : string) =  //respuesta
    Oracle.respond(o, q, r)        //agraga la respuesta

  entrypoint getQuestion(  //consulta la pregunta que le hicieron al orácula según id
                          o : oracle(string, string),    //dirección del oráculo
                          q : oracle_query(string, string)) : string =    //id de la consulta en el oráculo
    Oracle.get_question(o, q)      //muestra la pregunta

  entrypoint hasAnswer(  //Consulta si la pregunta tiene respuesta
                       o : oracle(string, string),
                       q : oracle_query(string, string)) =
    switch(Oracle.get_answer(o, q))
      None    => false
      Some(_) => true

  entrypoint getAnswer(  //Muestra la respuesta a una preguna
                       o : oracle(string, string),  //dirección del oráculo
                       q : oracle_query(string, string)) : option(string) =    //id de la consulta en el oráculo
    Oracle.get_answer(o, q)  //muestra la respuesta
    
  //Funciones básicas
  
  stateful entrypoint contract_creator() = //dirección que creo el contracto
    Contract.creator

  stateful entrypoint contract_address() = //dirección del contracto
    Contract.address

  stateful entrypoint contract_balance() = //balance del contracto
    Contract.balance
